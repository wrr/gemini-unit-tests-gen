# A list of the files from keon/algorithms repository for which Gemini
# should add unit tests. The list inludes all the files with less than
# 100% test coverage sorted in order of increasing existing tests
# coverage.

# The list was obtained by running:
"""
source venv/bin/activate;
cd algorithms;
coverage run --omit=tests*,*init*,test*  -m unittest discover tests;
coverage report -m | grep '.py'|grep -v '100%'|sort -n -k4|cut -f1 -d' ' > filestotest.py
"""
# And then an emacs macro to format the list (add quotes, indents and
# commas)

FILES_TO_TEST = [
    'algorithms/search/search_rotate.py',
    'algorithms/search/ternary_search.py',
    'algorithms/sort/insertion_sort.py',
    'algorithms/maths/prime_check.py',
    'algorithms/search/search_range.py',
    'algorithms/strings/count_binary_substring.py',
    'algorithms/dp/num_decodings.py',
    'algorithms/search/first_occurrence.py',
    'algorithms/strings/strip_url_params.py',
    'algorithms/maths/euler_totient.py',
    'algorithms/search/two_sum.py',
    'algorithms/search/jump_search.py',
    'algorithms/search/last_occurrence.py',
    'algorithms/search/search_insert.py',
    'algorithms/sort/stooge_sort.py',
    'algorithms/search/find_min_rotate.py',
    'algorithms/dp/max_product_subarray.py',
    'algorithms/bfs/shortest_distance_from_all_buildings.py',
    'algorithms/dp/word_break.py',
    'algorithms/maths/rsa.py',
    'algorithms/dp/matrix_chain_order.py',
    'algorithms/dp/longest_increasing.py',
    'algorithms/maths/find_order_simple.py',
    'algorithms/maths/find_primitive_root_simple.py',
    'algorithms/search/next_greatest_letter.py',
    'algorithms/dp/min_cost_path.py',
    'algorithms/search/interpolation_search.py',
    'algorithms/search/linear_search.py',
    'algorithms/heap/merge_sorted_k_lists.py',
    'algorithms/graph/find_path.py',
    'algorithms/matrix/sparse_dot_vector.py',
    'algorithms/maths/pythagoras.py',
    'algorithms/tree/traversal/inorder.py',
    'algorithms/graph/maximum_flow.py',
    'algorithms/graph/count_connected_number_of_component.py',
    'algorithms/matrix/rotate_image.py',
    'algorithms/strings/validate_coordinates.py',
    'algorithms/stack/is_consecutive.py',
    'algorithms/dfs/sudoku_solver.py',
    'algorithms/strings/first_unique_char.py',
    'algorithms/graph/strongly_connected_components_kosaraju.py',
    'algorithms/matrix/copy_transform.py',
    'algorithms/sort/selection_sort.py',
    'algorithms/strings/multiply_strings.py',
    'algorithms/strings/reverse_words.py',
    'algorithms/graph/graph.py',
    'algorithms/linkedlist/is_cyclic.py',
    'algorithms/dp/hosoya_triangle.py',
    'algorithms/strings/fizzbuzz.py',
    'algorithms/matrix/bomb_enemy.py',
    'algorithms/strings/contain_string.py',
    'algorithms/strings/one_edit_distance.py',
    'algorithms/strings/repeat_string.py',
    'algorithms/strings/roman_to_int.py',
    'algorithms/strings/strong_password.py',
    'algorithms/sort/counting_sort.py',
    'algorithms/strings/merge_string_checker.py',
    'algorithms/tree/construct_tree_postorder_preorder.py',
    'algorithms/sort/bogo_sort.py',
    'algorithms/sort/cocktail_shaker_sort.py',
    'algorithms/sort/heap_sort.py',
    'algorithms/sort/bubble_sort.py',
    'algorithms/dp/job_scheduling.py',
    'algorithms/map/is_isomorphic.py',
    'algorithms/sort/radix_sort.py',
    'algorithms/tree/traversal/preorder.py',
    'algorithms/map/separate_chaining_hashtable.py',
    'algorithms/maths/polynomial.py',
    'algorithms/matrix/sudoku_validator.py',
    'algorithms/sort/quick_sort.py',
    'algorithms/tree/traversal/postorder.py',
    'algorithms/map/hashtable.py',
    'algorithms/maths/base_conversion.py',
    'algorithms/maths/next_perfect_square.py',
    'algorithms/stack/stack.py',
    'algorithms/strings/domain_extractor.py',
    'algorithms/tree/b_tree.py',
    'algorithms/linkedlist/is_sorted.py',
    'algorithms/maths/generate_strobogrammtic.py',
    'algorithms/matrix/spiral_traversal.py',
    'algorithms/queues/queue.py',
    'algorithms/strings/longest_common_prefix.py',
    'algorithms/queues/priority_queue.py',
    'algorithms/strings/make_sentence.py',
    'algorithms/compression/huffman_coding.py',
    'algorithms/matrix/multiply.py',
    'algorithms/sort/cycle_sort.py',
    'algorithms/sort/pancake_sort.py',
    'algorithms/unix/path/simplify_path.py',
    'algorithms/automata/dfa.py',
    'algorithms/backtrack/letter_combination.py',
    'algorithms/greedy/max_contiguous_subsequence_sum.py',
    'algorithms/linkedlist/remove_range.py',
    'algorithms/maths/diffie_hellman_key_exchange.py',
    'algorithms/maths/rabin_miller.py',
    'algorithms/sort/top_sort.py',
    'algorithms/strings/reverse_vowel.py',
    'algorithms/heap/sliding_window_max.py',
    'algorithms/linkedlist/is_palindrome.py',
    'algorithms/linkedlist/rotate_list.py',
    'algorithms/map/word_pattern.py',
    'algorithms/maths/chinese_remainder_theorem.py',
    'algorithms/matrix/sum_sub_squares.py',
    'algorithms/backtrack/pattern_match.py',
    'algorithms/bit/has_alternative_bit.py',
    'algorithms/graph/check_bipartite.py',
    'algorithms/linkedlist/reverse.py',
    'algorithms/linkedlist/swap_in_pairs.py',
    'algorithms/maths/cosine_similarity.py',
    'algorithms/stack/is_sorted.py',
    'algorithms/stack/remove_min.py',
    'algorithms/strings/rabin_karp.py',
    'algorithms/backtrack/add_operators.py',
    'algorithms/dfs/maze_search.py',
    'algorithms/graph/bellman_ford.py',
    'algorithms/matrix/crout_matrix_decomposition.py',
    'algorithms/strings/longest_palindromic_substring.py',
    'algorithms/bfs/maze_search.py',
    'algorithms/dp/fib.py',
    'algorithms/heap/binary_heap.py',
    'algorithms/sort/bitonic_sort.py',
    'algorithms/stack/ordered_stack.py',
    'algorithms/strings/is_palindrome.py',
    'algorithms/strings/knuth_morris_pratt.py',
    'algorithms/bfs/word_ladder.py',
    'algorithms/dp/k_factor.py',
    'algorithms/matrix/sort_matrix_diagonally.py',
    'algorithms/strings/breaking_bad.py',
    'algorithms/strings/text_justification.py',
    'algorithms/matrix/matrix_inversion.py',
]

